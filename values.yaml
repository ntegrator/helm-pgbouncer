######################################################
# # PgBouncer Helm Chart 
# based on Bitnami docker image 

# PgBouncer - lightweight connection pooler for PostgreSQL.  
# Homepage: https://www.pgbouncer.org/  

# ## TL;DR
# git clone https://github.com/ntegrator/helm-pgbouncer.git
# helm install my-release ./helm-pgbouncer

# ## Example of usage
# ### 1. Preparing your DB for using PgBouncer
# Please read the PgBouncer documentation first - https://www.pgbouncer.org/config.html

# Execute on your DB Master node:
# \c your_app_db

# CREATE USER pgbouncer WITH PASSWORD 'superpassword';

# CREATE SCHEMA pgbouncer AUTHORIZATION pgbouncer;

# GRANT ALL ON SCHEMA pgbouncer TO pgbouncer;

# CREATE OR REPLACE FUNCTION pgbouncer.user_lookup(in i_username text, out uname text, out phash text)
# RETURNS record AS $$
# BEGIN
#     SELECT usename, passwd FROM pg_catalog.pg_shadow
#     WHERE usename = i_username INTO uname, phash;
#     RETURN;
# END;
# $$ LANGUAGE plpgsql SECURITY DEFINER;

# REVOKE ALL ON FUNCTION pgbouncer.user_lookup(text) FROM public, pgbouncer;

# GRANT EXECUTE ON FUNCTION pgbouncer.user_lookup(text) TO pgbouncer;

# ### 2. Set `PGBOUNCER_AUTH_QUERY` in PgBouncer Helm chart:
# env:
# ...
#   PGBOUNCER_AUTH_QUERY: "SELECT * FROM pgbouncer.user_lookup($1)"
#   ...

# ### 3. Set other variables in PgBouncer Helm chart if needed
# vim helm-pgbouncer/values.yaml

# ### 4. Install Helm release
# helm install my-release ./helm-pgbouncer

# ### 5. Change postgres connection string in your application.  
# Just replace `...postgresql_host:postgresql_port/...` on `...pgbouncer_host:pgbouncer_port/...`  
# Example:  
#   before - `app_user:mega_password@1.2.3.4:5432/your_app_db`  
#   after  - `app_user:mega_password@pgbouncer:6432/your_app_db`

######################################################


### Values for PgBouncer ###

## If the "replicaCount" is bigger than 1, you need to edit the parameters PGBOUNCER_MAX_CLIENT_CONN etc.
## The new value can be calculated with the formula: 
## NEW_VALUE(with N replicas) = OLD_VALUE(with 1 replica) / replicaCount(N>1 replicas)
replicaCount: 2

resources:
  requests:
    cpu: 100m
    memory: 200Mi
  limits:
    cpu: 200m
    memory: 400Mi

# Service configuration
service:
  enabled: true
  type: ClusterIP
  name: ""
  annotations: {}

image:
  # PgBouncer Docker image from Bitnami
  # https://github.com/bitnami/containers/tree/main/bitnami/pgbouncer
  repository: bitnami/pgbouncer
  tag: 1.17.0
  pullPolicy: IfNotPresent

imagePullSecrets: []
# Secret for pulling image from your Docker registry
## Example:
  # - name: "registry-pull-secret"

### env: Section with Environment variables ###
# See docs for Docker image from bitnami https://github.com/bitnami/containers/tree/main/bitnami/pgbouncer
# See docs for PgBouncer https://www.pgbouncer.org/config.html
env:
# PGBOUNCER_AUTH_TYPE: which can be set to any of the values available in the official PgBouncer documentation https://www.pgbouncer.org/config.html
# Set the backend PostgreSQL credentials as explained in the Backend PostgreSQL connection section https://github.com/bitnami/bitnami-docker-pgbouncer#backend-postgresql-connection
## Default: md5.
  # PGBOUNCER_AUTH_TYPE: "md5"

# POSTGRESQL_USERNAME: Backend PostgreSQL username.
## Default: postgres.
  POSTGRESQL_USERNAME: "pgbouncer"

# POSTGRESQL_PASSWORD: Backend PostgreSQL password.
## No defaults.
  POSTGRESQL_PASSWORD: "superpassword"

# POSTGRESQL_DATABASE: Backend PostgreSQL Database name to connect to.
## Default: postgres.
  # POSTGRESQL_DATABASE: "your_app_db"

# POSTGRESQL_HOST: Backend PostgreSQL hostname.
## Default: postgresql.
  # POSTGRESQL_HOST: "1.2.3.4"

# POSTGRESQL_PORT: Backend PostgreSQL port.
## Default: 5432.
  # POSTGRESQL_PORT: "5432"

# PGBOUNCER_SET_DATABASE_USER: Whether to include the backend PostgreSQL username in the database string.
## Default no.
  # PGBOUNCER_SET_DATABASE_USER: "yes"

# PGBOUNCER_SET_DATABASE_PASSWORD: Whether to include the backend PostgreSQL password in the database string.
## Default no.
  # PGBOUNCER_SET_DATABASE_PASSWORD: "yes"

# PGBOUNCER_CONNECT_QUERY: Query which will be executed after a connection is established.
## No Defaults.
  # PGBOUNCER_CONNECT_QUERY: ""

# PGBOUNCER_PORT: PgBouncer port.
## Default: 6432.
  # PGBOUNCER_PORT: "6432"

# # PGBOUNCER_BIND_ADDRESS: PgBouncer bind address.
# ## Default: 0.0.0.0.
  # PGBOUNCER_BIND_ADDRESS: "0.0.0.0"

# In case you want to add extra flags to the PgBouncer command, use the PGBOUNCER_EXTRA_FLAGS variable.
# Example: PGBOUNCER_EXTRA_FLAGS: "--verbose"
## No defaults.
  # PGBOUNCER_EXTRA_FLAGS: "--verbose"

# PGBOUNCER_DATABASE: PgBouncer exposed database. 
# In case you'd like pgbouncer to expose your database with a different name, you can use the PGBOUNCER_DATABASE variable. 
# To expose the same database name as the backend, set PGBOUNCER_DATABASE="$POSTGRESQL_DATABASE".
## Default: postgres.
  # PGBOUNCER_DATABASE: "your_app_db"

# PGBOUNCER_AUTH_USER: PgBouncer will use this user to connect to the database and query the PostgreSQL backend for a user and password.
## No defaults.
  PGBOUNCER_AUTH_USER: "pgbouncer"

# PGBOUNCER_AUTH_QUERY: PgBouncer will use this query to connect to the database and query the PostgreSQL backend for a user and password. 
## No defaults.
  PGBOUNCER_AUTH_QUERY: "SELECT * FROM pgbouncer.user_lookup($1)"

# PGBOUNCER_POOL_MODE : PgBouncer pool mode. Allowed values: session, transaction and statement.
## Default: session.
  PGBOUNCER_POOL_MODE: "session"

# PGBOUNCER_INIT_SLEEP_TIME : PgBouncer initialization sleep time.
## Default: 10.
  # PGBOUNCER_INIT_SLEEP_TIME: ""

# PGBOUNCER_INIT_MAX_RETRIES : PgBouncer initialization maximum retries.
## Default: 10.
  # PGBOUNCER_INIT_MAX_RETRIES: ""

# PGBOUNCER_QUERY_WAIT_TIMEOUT : PgBouncer maximum time queries are allowed to spend waiting for execution.
## Default: 120.
  # PGBOUNCER_QUERY_WAIT_TIMEOUT: ""

# PGBOUNCER_MAX_CLIENT_CONN : PgBouncer maximum number of client connections allowed.
## Default: 120.
  # PGBOUNCER_MAX_CLIENT_CONN: "5000"

# PGBOUNCER_MAX_DB_CONNECTIONS : PgBouncer maximum number of database connections allowed.
## Default: 0 (unlimited).
  # PGBOUNCER_MAX_DB_CONNECTIONS: "50"

# PGBOUNCER_IDLE_TRANSACTION_TIMEOUT : PgBouncer maximum time for a client to be in "idle in transaction" state.
## Default: 0.0.
  # PGBOUNCER_IDLE_TRANSACTION_TIMEOUT: ""

# PGBOUNCER_DEFAULT_POOL_SIZE : PgBouncer maximum server connections to allow per user/database pair.
## Default: 20.
  # PGBOUNCER_DEFAULT_POOL_SIZE: "3"

# PGBOUNCER_MIN_POOL_SIZE : PgBouncer has at least this amount of open connections. 
## Default: 0 (disabled).
  # PGBOUNCER_MIN_POOL_SIZE: "1"

# PGBOUNCER_RESERVE_POOL_SIZE : PgBouncer allows this amount of additional connections. 
## Default: 0 (disabled).
  # PGBOUNCER_RESERVE_POOL_SIZE: "10"

# PGBOUNCER_IGNORE_STARTUP_PARAMETERS: you can use this to set ignore_startup_parameters in the auto-generated pgbouncer.ini.
# This can be useful for solving certain connection issues. See https://www.pgbouncer.org/config.html for more details.
## No defaults.
  PGBOUNCER_IGNORE_STARTUP_PARAMETERS: "extra_float_digits"

# PGBOUNCER_CLIENT_TLS_SSLMODE: TLS traffic settings.
# Check the official PgBouncer documentation (https://www.pgbouncer.org/config.html) for the available values for client_tls_sslmode.
## Default: disable
  # PGBOUNCER_CLIENT_TLS_SSLMODE: "require"

# PGBOUNCER_CLIENT_TLS_KEY_FILE: File containing the key for certificate.
## No defaults.
  # PGBOUNCER_CLIENT_TLS_KEY_FILE: "/opt/bitnami/pgbouncer/certs/pgbouncer.key"

# PGBOUNCER_CLIENT_TLS_CERT_FILE: File containing the certificate file for the TLS traffic.
## No defaults.
  # PGBOUNCER_CLIENT_TLS_CERT_FILE: "/opt/bitnami/pgbouncer/certs/pgbouncer.crt"

# PGBOUNCER_SERVER_IDLE_TIMEOUT: PgBouncer maximum time in seconds a server connection can be idle. If 0 then the timeout is disabled. 
## Default: 600
  # PGBOUNCER_SERVER_IDLE_TIMEOUT: ""

# PGBOUNCER_SERVER_RESET_QUERY: PgBouncer query sent to server on connection release before making it available to other clients. 
## Default: DISCARD ALL
  # PGBOUNCER_SERVER_RESET_QUERY: ""

# PGBOUNCER_STATS_USERS: PgBouncer comma-separated list of database users that are allowed to connect and run read-only queries. 
## No defaults.
  # PGBOUNCER_STATS_USERS: ""

# cert:
#   crt: |-
#     -----BEGIN CERTIFICATE-----
#     your_certificate
#     -----END CERTIFICATE-----
#   key: |-
#     -----BEGIN PRIVATE KEY-----
#     your_private_key
#     -----END PRIVATE KEY-----

spec:
  labels: {}
  annotations:
    {}

labels: {}

# Whether to use helm2-style selectors.  Note pgbouncer version <= v1.0.10 defined the Deployment spec.template.matchLabels:{} this way,
# so define this to true to upgrade an existing pgbouncer deployment of versions <= v1.0.10.
helm2selector: false

# Configure probes
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  initialDelaySeconds: 0
  periodSeconds: 1
  successThreshold: 2

livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 2
